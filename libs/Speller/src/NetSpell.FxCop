<?xml version="1.0" encoding="utf-8"?>
<FxCopProject Version="1.3" Name="NetSpell">
 <ProjectOptions>
  <SharedProject>False</SharedProject>
  <Stylesheet Apply="False">c:\program files\microsoft fxcop 1.23\Xml\FxCopReport.xsl</Stylesheet>
  <SaveMessages>
   <Project Status="Active, Excluded" NewOnly="False" />
   <Report Status="Active" NewOnly="False" />
  </SaveMessages>
  <ProjectFile Compress="True" DefaultTargetCheck="True" DefaultRuleCheck="True" SaveByRuleGroup="" Deterministic="False" />
  <PermitAnalysis>True</PermitAnalysis>
  <SourceLookup>True</SourceLookup>
  <AnalysisExceptionsThreshold>100</AnalysisExceptionsThreshold>
  <RuleExceptionsThreshold>10</RuleExceptionsThreshold>
  <Spelling Locale="en-us" />
 </ProjectOptions>
 <Targets>
  <Target Name="NetSpell.SpellChecker\bin\debug\NetSpell.SpellChecker.dll" Analyze="True" AnalyzeAllChildren="True" />
 </Targets>
 <Rules>
  <RuleFiles>
   <RuleFile Name="$(FxCopDir)\Rules\PerformanceRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\ComRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\UsageRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\SecurityRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\DesignRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\GlobalizationRules.dll" Enabled="True" AllRulesEnabled="True" />
   <RuleFile Name="$(FxCopDir)\Rules\NamingRules.dll" Enabled="True" AllRulesEnabled="True" />
  </RuleFiles>
  <Groups />
  <Settings />
 </Rules>
 <FxCopReport Version="1.3" LastAnalysis="2004-03-30 23:41:57Z">
  <Namespaces>
   <Namespace Name="NetSpell.SpellChecker">
    <Messages>
     <Message Status="Active" Created="2004-03-30 23:30:41Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Issues>
       <Issue Certainty="50" Level="Warning">
        <Resolution>
         <Data>
          <Items>
           <Item>NetSpell.SpellChecker</Item>
          </Items>
         </Data>
        </Resolution>
       </Issue>
      </Issues>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NetSpell.SpellChecker.Dictionary">
    <Messages>
     <Message Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Issues>
       <Issue Certainty="50" Level="Warning">
        <Resolution>
         <Data>
          <Items>
           <Item>NetSpell.SpellChecker.Dictionary</Item>
          </Items>
         </Data>
        </Resolution>
       </Issue>
      </Issues>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NetSpell.SpellChecker.Forms">
    <Messages>
     <Message Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Issues>
       <Issue Certainty="50" Level="Warning">
        <Resolution>
         <Data>
          <Items>
           <Item>NetSpell.SpellChecker.Forms</Item>
          </Items>
         </Data>
        </Resolution>
       </Issue>
      </Issues>
     </Message>
    </Messages>
   </Namespace>
   <Namespace Name="NetSpell.SpellChecker.Dictionary.Phonetic">
    <Messages>
     <Message Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AvoidNamespacesWithFewMembers" />
      <Issues>
       <Issue Certainty="50" Level="Warning">
        <Resolution>
         <Data>
          <Items>
           <Item>NetSpell.SpellChecker.Dictionary.Phonetic</Item>
          </Items>
         </Data>
        </Resolution>
       </Issue>
      </Issues>
     </Message>
    </Messages>
   </Namespace>
  </Namespaces>
  <Targets>
   <Target Name="NetSpell.SpellChecker\bin\debug\NetSpell.SpellChecker.dll">
    <Messages>
     <Message Status="Active" Created="2003-11-10 07:07:28Z">
      <Rule TypeName="AssembliesHavePermissionRequests" />
      <Issues>
       <Issue Certainty="99" Level="CriticalError">
        <Resolution>
         <Data>
          <Items>
           <Item>NetSpell.SpellChecker</Item>
          </Items>
         </Data>
        </Resolution>
       </Issue>
      </Issues>
     </Message>
    </Messages>
    <Modules>
     <Module Name="netspell.spellchecker.dll">
      <Namespaces>
       <Namespace Name="NetSpell.SpellChecker">
        <Classes>
         <Class Name="Spelling">
          <Enums>
           <Enum Name="SuggestionEnum">
            <Messages>
             <Message Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="EnumerationNamesDoNotHaveEnumSuffix" />
              <Issues>
               <Issue Certainty="99" Level="Error">
                <Resolution>
                 <Data>
                  <Items>
                   <Item>SuggestionEnum</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Enum>
          </Enums>
          <Methods>
           <Method Name="TwoWords(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="473" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="SpellCheck(System.Int32,System.Int32):System.Boolean">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="TestForEmptyStringsUsingStringLength" />
              <Issues>
               <Issue Certainty="95" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="914" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>op_Equality</Item>
                   <Item>""</Item>
                   <Item>Spelling.SpellCheck(Int32 startWordIndex, Int32 endWordIndex)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TestWord(System.String):System.Boolean">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="1138" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="BadChar(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="339" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="ReplaceChars(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="422" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="SpellCheck(System.String):System.Boolean">
            <Parameters>
             <Parameter Name="0">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="ParameterNamesDoNotMatchKeywords" />
                <Issues>
                 <Issue Certainty="95" Level="Error">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="951" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>text</Item>
                     <Item>Text</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Method>
           <Method Name="SpellCheck(System.String,System.Int32):System.Boolean">
            <Parameters>
             <Parameter Name="0">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="ParameterNamesDoNotMatchKeywords" />
                <Issues>
                 <Issue Certainty="95" Level="Error">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="978" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>text</Item>
                     <Item>Text</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Method>
           <Method Name="SwapChar(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="449" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="ForgotChar(System.Collections.ArrayList&amp;):System.Void">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="spelling.cs" Line="390" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Dictionary.Affix">
        <Classes>
         <Class Name="AffixEntry">
          <Properties>
           <Property Name="Condition">
            <Messages>
             <Message Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="PropertiesShouldNotReturnArrays" />
              <Issues>
               <Issue Certainty="50" Level="Warning">
                <SourceCode Path="D:\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixEntry.cs" Line="37" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Condition</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="D:\Projects\LoreSoft\NetSpell\NetSpell\src\NetSpell.SpellChecker\Dictionary\Affix" File="AffixEntry.cs" Line="37" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Condition</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
         <Class Name="AffixRuleCollection">
          <Messages>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers" />
            <Issues>
             <Issue Certainty="90" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixRuleCollection</Item>
                 <Item>CopyTo</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="DictionaryNamesHaveDictionarySuffix" />
            <Issues>
             <Issue Certainty="95" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixRuleCollection</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
          </Messages>
          <Fields>
           <Field Name="innerHash">
            <Messages>
             <Message Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="TypesDoNotHavePublicInstanceFields" />
              <Issues>
               <Issue Certainty="90" Level="Error">
                <Resolution>
                 <Data>
                  <Items>
                   <Item>innerHash</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Field>
          </Fields>
         </Class>
         <Class Name="AffixRuleEnumerator">
          <Messages>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="IEnumeratorImplementationsHaveStronglyTypedMembers" />
            <Issues>
             <Issue Certainty="90" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixRuleEnumerator</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
          </Messages>
         </Class>
         <Class Name="AffixRule">
          <Properties>
           <Property Name="AffixEntries">
            <Messages>
             <Message Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary\affix" File="affixrule.cs" Line="37" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>AffixEntries</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
         <Class Name="AffixUtility">
          <Messages>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="TypesHavingOnlyStaticMembersShouldNotHaveConstructors" />
            <Issues>
             <Issue Certainty="90" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>AffixUtility</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
          </Messages>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Dictionary">
        <Classes>
         <Class Name="WordDictionary">
          <Messages>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="OnlyDictionaryNamesHaveDictionarySuffix" />
            <Issues>
             <Issue Certainty="99" Level="CriticalError">
              <Resolution>
               <Data>
                <Items>
                 <Item>WordDictionary</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
          </Messages>
          <Methods>
           <Method Name="Initialize():System.Void">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="TestForEmptyStringsUsingStringLength" />
              <Issues>
               <Issue Certainty="95" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="worddictionary.cs" Line="436" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>op_Equality</Item>
                   <Item>""</Item>
                   <Item>WordDictionary.Initialize()</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="PhoneticCode(System.String):System.String">
            <Messages>
             <Message ID="System.String.ToUpper" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="worddictionary.cs" Line="521" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToUpper()</Item>
                   <Item>String.ToUpper(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
         <Class Name="Word">
          <Messages>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="IComparableImplementationsOverrideOperators" />
            <Issues>
             <Issue Certainty="75" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>Word</Item>
                 <Item>==</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
             <Issue Certainty="75" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>Word</Item>
                 <Item>!=</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
             <Issue Certainty="75" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>Word</Item>
                 <Item>&lt;</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
             <Issue Certainty="75" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>Word</Item>
                 <Item>&gt;</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
           <Message Status="Active" Created="2003-11-10 07:07:28Z">
            <Rule TypeName="IComparableImplementationsOverrideEquals" />
            <Issues>
             <Issue Certainty="75" Level="Error">
              <Resolution>
               <Data>
                <Items>
                 <Item>Word</Item>
                </Items>
               </Data>
              </Resolution>
             </Issue>
            </Issues>
           </Message>
          </Messages>
          <Constructors>
           <Constructor Name=".ctor(System.String,System.String)">
            <Parameters>
             <Parameter Name="0">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="ParameterNamesDoNotMatchKeywords" />
                <Issues>
                 <Issue Certainty="95" Level="Error">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="word.cs" Line="10" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>text</Item>
                     <Item>Text</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Constructor>
           <Constructor Name=".ctor(System.String,System.String,System.String)">
            <Parameters>
             <Parameter Name="0">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="ParameterNamesDoNotMatchKeywords" />
                <Issues>
                 <Issue Certainty="95" Level="Error">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="word.cs" Line="10" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>text</Item>
                     <Item>Text</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Constructor>
           <Constructor Name=".ctor(System.String)">
            <Parameters>
             <Parameter Name="0">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="ParameterNamesDoNotMatchKeywords" />
                <Issues>
                 <Issue Certainty="95" Level="Error">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="word.cs" Line="10" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>text</Item>
                     <Item>Text</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Constructor>
          </Constructors>
          <Properties>
           <Property Name="Height">
            <Methods>
             <Method Name="set_Height(System.Int32):System.Void">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="AvoidBuildingNonCallableCode" />
                <Issues>
                 <Issue Certainty="75" Level="Warning">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="word.cs" Line="195" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>NetSpell.SpellChecker.Dictionary.Word.set_Height(System.Int32)</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Method>
             <Method Name="get_Height():System.Int32">
              <Messages>
               <Message Status="Active" Created="2004-03-30 23:30:41Z">
                <Rule TypeName="AvoidBuildingNonCallableCode" />
                <Issues>
                 <Issue Certainty="75" Level="Warning">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary" File="word.cs" Line="194" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>NetSpell.SpellChecker.Dictionary.Word.get_Height</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Method>
            </Methods>
           </Property>
          </Properties>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Forms">
        <Classes>
         <Class Name="OptionForm">
          <Methods>
           <Method Name="OptionForm_Load(System.Object,System.EventArgs):System.Void">
            <Messages>
             <Message ID="System.String.ToLower" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="CultureInfoShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="optionsform.cs" Line="111" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.ToLower()</Item>
                   <Item>String.ToLower(CultureInfo culture)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.String.Format(System.String,System.Object[])" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="optionsform.cs" Line="96" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object[] args)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.String.Format(System.String,System.Object)" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="optionsform.cs" Line="82" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object arg0)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
         <Class Name="SuggestionForm">
          <Methods>
           <Method Name="UpdateDisplay(System.String,System.String,System.Int32,System.Int32):System.Void">
            <Messages>
             <Message ID="wordIndex+1" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="OperationsDoNotOverflowDataTypeCapacity" />
              <Issues>
               <Issue Certainty="75" Level="CriticalWarning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="suggestionform.cs" Line="434" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>wordIndex</Item>
                   <Item>+</Item>
                   <Item>1</Item>
                   <Item>NetSpell.SpellChecker.Forms.SuggestionForm::UpdateDisplay(System.String text, System.String word, System.Int32 wordIndex, System.Int32 textIndex)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.Int32.ToString" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="suggestionform.cs" Line="435" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Int32.ToString()</Item>
                   <Item>Int32.ToString(IFormatProvider provider)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="suggestionform.cs" Line="437" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Int32.ToString()</Item>
                   <Item>Int32.ToString(IFormatProvider provider)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.String.Format(System.String,System.Object,System.Object)" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="suggestionform.cs" Line="435" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object arg0, Object arg1)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.String.Format(System.String,System.Object)" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\forms" File="suggestionform.cs" Line="437" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object arg0)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="NetSpell.SpellChecker.Dictionary.Phonetic">
        <Classes>
         <Class Name="PhoneticRule">
          <Properties>
           <Property Name="Condition">
            <Messages>
             <Message Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="PropertiesShouldNotReturnArrays" />
              <Issues>
               <Issue Certainty="50" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary\phonetic" File="phoneticrule.cs" Line="41" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Condition</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Property>
          </Properties>
         </Class>
         <Class Name="PhoneticUtility">
          <Methods>
           <Method Name="EncodeRule(System.String,NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule&amp;):System.Void">
            <Messages>
             <Message ID="System.Int32.Parse(System.String)" Status="Active" Created="2003-11-10 07:07:28Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary\phonetic" File="phoneticutility.cs" Line="77" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>Int32.Parse(String s)</Item>
                   <Item>Int32.Parse(String s, IFormatProvider provider)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
            <Parameters>
             <Parameter Name="1">
              <Messages>
               <Message Status="Active" Created="2003-11-10 07:07:28Z">
                <Rule TypeName="ReferenceTypesAreNotPassedAsByRefParameters" />
                <Issues>
                 <Issue Certainty="75" Level="Warning">
                  <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker\dictionary\phonetic" File="phoneticutility.cs" Line="34" />
                  <Resolution>
                   <Data>
                    <Items>
                     <Item>rule</Item>
                    </Items>
                   </Data>
                  </Resolution>
                 </Issue>
                </Issues>
               </Message>
              </Messages>
             </Parameter>
            </Parameters>
           </Method>
          </Methods>
         </Class>
        </Classes>
       </Namespace>
       <Namespace Name="">
        <Classes>
         <Class Name="TraceWriter">
          <Methods>
           <Method Name="GetCallingMethod(System.Diagnostics.StackTrace):System.String">
            <Messages>
             <Message ID="System.String.Format(System.String,System.Object,System.Object)" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="66" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object arg0, Object arg1)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceVerbose(System.String):System.Void">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="AvoidBuildingNonCallableCode" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="57" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>TraceWriter.TraceVerbose(System.String)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceInfo(System.String):System.Void">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="AvoidBuildingNonCallableCode" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="34" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>TraceWriter.TraceInfo(System.String)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceInfo(System.String,System.Object[]):System.Void">
            <Messages>
             <Message ID="System.String.Format(System.String,System.Object[])" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="29" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object[] args)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceWarning(System.String,System.Object[]):System.Void">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="AvoidBuildingNonCallableCode" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="40" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>TraceWriter.TraceWarning(System.String,System.Object[])</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.String.Format(System.String,System.Object[])" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="41" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object[] args)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceVerbose(System.String,System.Object[]):System.Void">
            <Messages>
             <Message ID="System.String.Format(System.String,System.Object[])" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="52" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object[] args)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceError(System.String):System.Void">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="AvoidBuildingNonCallableCode" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="22" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>TraceWriter.TraceError(System.String)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
           <Method Name="TraceError(System.String,System.Object[]):System.Void">
            <Messages>
             <Message Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="AvoidBuildingNonCallableCode" />
              <Issues>
               <Issue Certainty="75" Level="Warning">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="16" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>TraceWriter.TraceError(System.String,System.Object[])</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
             <Message ID="System.String.Format(System.String,System.Object[])" Status="Active" Created="2004-03-30 23:30:41Z">
              <Rule TypeName="IFormatProviderShouldBePassed" />
              <Issues>
               <Issue Certainty="95" Level="Error">
                <SourceCode Path="d:\projects\loresoft\netspell\netspell\src\netspell.spellchecker" File="tracewriter.cs" Line="17" />
                <Resolution>
                 <Data>
                  <Items>
                   <Item>String.Format(String format, Object[] args)</Item>
                   <Item>String.Format(IFormatProvider provider, String format, Object[] args)</Item>
                  </Items>
                 </Data>
                </Resolution>
               </Issue>
              </Issues>
             </Message>
            </Messages>
           </Method>
          </Methods>
         </Class>
        </Classes>
       </Namespace>
      </Namespaces>
     </Module>
    </Modules>
   </Target>
  </Targets>
  <Rules>
   <Rule TypeName="AssembliesHavePermissionRequests">
    <Name>Assemblies specify permission requests</Name>
    <Description>Permission requests prevent security exceptions from being thrown after code in an assembly has already begun executing. With permission requests, the assembly does not load if it has insufficient permissions. This rule will fire if you have specified a permission request incorrectly, or incompletely. If you have specified requests but FxCop reports a violation for this rule, use the PermView.exe tool to view the security permissions in the assembly. An unenforceable permission appears as an empty permission set.</Description>
    <LongDescription>You should add attributes specifying what permissions your assembly will demand, might demand, and what permissions it does not want granted.  For example, the following attribute indicates that an assembly will, at minimum, require read access to the USERNAME environment variable: [assembly:EnvironmentPermissionAttribute(SecurityAction.RequestMinimum,
Read="USERNAME")]. To specify permissions that the assembly might demand, use SecurityAction.RequestOptional. To specify permissions that the assembly must not be granted, use SecurityAction.RequestRefuse.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/UsageRules/AssembliesPermissionRequests.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">CriticalError</MessageLevel>
    <File Name="UsageRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="AvoidBuildingNonCallableCode">
    <Name>Avoid building non-callable code into assemblies</Name>
    <Description>There is code that appears to not be callable from a public or protected code path.</Description>
    <LongDescription>If this violation fires in error, please send a problem report to the FxCop team.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Performance/UncallableCode.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Warning</MessageLevel>
    <File Name="PerformanceRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="AvoidNamespacesWithFewMembers">
    <Name>Avoid having a namespace with a small number of types</Name>
    <Description>A namespace should generally have more than five types.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/AvoidSmallNamespaces.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="50">Warning</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="CultureInfoShouldBePassed">
    <Name>CultureInfo should be passed</Name>
    <Description>If an overload exists that takes a System.Globalization.CultureInfo argument, it should always be called in favor of an overload that does not.</Description>
    <LongDescription>The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Globalization/CultureInfoPassed.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="GlobalizationRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="DictionaryNamesHaveDictionarySuffix">
    <Name>Dictionary names have the 'Dictionary' suffix</Name>
    <Description>A type that extends Dictionary should be suffixed with 'Dictionary', as in StringDictionary.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/DictionaryNamesHaveDictionarySuffix.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="NamingRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="EnumerationNamesDoNotHaveEnumSuffix">
    <Name>Enumeration names do not have an 'Enum' suffix</Name>
    <Description>An enumeration name should not end in 'Enum'.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/EnumNamesDoNotHaveEnumSuffix.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">Error</MessageLevel>
    <File Name="NamingRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers">
    <Name>ICollection implementations have strongly typed members</Name>
    <Description>Types that implement ICollection should also provide a version of CopyTo with the first parameter set to a strong type, namely a type other than an array of objects or System.Array. Implement the interface member explicitly and make the strongly typed version public.</Description>
    <LongDescription>It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a binary tree, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/ICollectionsStronglyTyped.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="IComparableImplementationsOverrideEquals">
    <Name>IComparable implementations override System.Object.Equals</Name>
    <Description>Types that implement IComparable should redefine Equals to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/IComparableEquals.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="IComparableImplementationsOverrideOperators">
    <Name>IComparable implementations override operators</Name>
    <Description>Types that implement IComparable should redefine comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/IComparableOperators.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="IEnumeratorImplementationsHaveStronglyTypedMembers">
    <Name>IEnumerator implementations have strongly typed members</Name>
    <Description>Types that implement IEnumerator should also provide a version of the Current property that returns a type other than Object.  Implement the interface member explicitly and make the strongly typed version public.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/IEnumeratorStronglyTyped.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="IFormatProviderShouldBePassed">
    <Name>IFormatProvider should be passed</Name>
    <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not.</Description>
    <LongDescription>Some methods in the common language runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Globalization/IFormatProviderPassed.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="GlobalizationRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="OnlyDictionaryNamesHaveDictionarySuffix">
    <Name>Only dictionary names have the 'Dictionary' suffix</Name>
    <Description>Types that do not extend Dictionary do not have the 'Dictionary' suffix.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/OnlyDictionaryNamesHaveDictionarySuffix.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="99">CriticalError</MessageLevel>
    <File Name="NamingRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="OperationsDoNotOverflowDataTypeCapacity">
    <Name>Operations do not overflow the maximum capacity of the data type</Name>
    <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
    <LongDescription />
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/UsageRules/OperationsDoNotOverflowDataType.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
    <File Name="UsageRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="ParameterNamesDoNotMatchKeywords">
    <Name>Parameter names do not match reserved keywords</Name>
    <Description>Identifiers which match reserved keywords should be avoided. Matching is performed case-insensitively.</Description>
    <LongDescription>Names that describe the purpose or contents of a parameter are preferable to names that describe the data type or format. If a parameter has no descriptive information other than its type, use a generic name such as 'value'.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/NamingRules/ParameterNamesDoNotMatchKeywords.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Error</MessageLevel>
    <File Name="NamingRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="PropertiesReturningCollectionsShouldBeReadOnly">
    <Name>Properties that return collections should be read-only</Name>
    <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection.</Description>
    <LongDescription>Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/UsageRules/PropertiesCollectionsReadOnly.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Warning</MessageLevel>
    <File Name="UsageRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="PropertiesShouldNotReturnArrays">
    <Name>Properties should not return arrays</Name>
    <Description>Properties that return arrays are prone to code inefficiencies.</Description>
    <LongDescription>Consider using a collection or making this a method. See the design guidelines for more information.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Performance/PropertyArray.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="50">Warning</MessageLevel>
    <File Name="PerformanceRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="ReferenceTypesAreNotPassedAsByRefParameters">
    <Name>Reference types are not passed as ref (pointer) parameters</Name>
    <Description>Reference types are pointers by definition, so a ref parameter that takes a reference type is a double indirection (analogous to a 'double pointer' in C++). This design is inappropriate for most managed code scenarios.</Description>
    <LongDescription>Although there are legitimate times to use reference parameters for reference types, such use frequently indicates a design that does not conform to the design guidelines for managed code.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/RefTypeNotRefParm.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="75">Warning</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="TestForEmptyStringsUsingStringLength">
    <Name>Test for empty strings using System.String.Length</Name>
    <Description>To test for empty strings, check if String.Length is equal to zero.</Description>
    <LongDescription>Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/Performance/EmptyStringCompare.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="95">Warning</MessageLevel>
    <File Name="PerformanceRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="TypesDoNotHavePublicInstanceFields">
    <Name>Types do not have externally visible instance fields</Name>
    <Description>Public or protected instance fields limit your ability to change the implementation details for those data items.</Description>
    <LongDescription>Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the  implementation details of the underlying data.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/TypesDoNotHavePublicInstanceFields.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
   <Rule TypeName="TypesHavingOnlyStaticMembersShouldNotHaveConstructors">
    <Name>Types with only static members should not have public or protected constructors</Name>
    <Description>Instances of types that define only static members do not need to be created.</Description>
    <LongDescription>Many compilers will automatically add a public default constructor if no constructor is specified.  To prevent this, adding an empty private constructor may be required.</LongDescription>
    <GroupOwner>MS FxCopDev</GroupOwner>
    <DevOwner />
    <Url>http://www.gotdotnet.com/team/fxcop/docs/rules/DesignRules/StaticTypesNoCtors.html</Url>
    <Email>askfxcop@microsoft.com</Email>
    <MessageLevel Certainty="90">Error</MessageLevel>
    <File Name="DesignRules.dll" Version="1.30.0.0" />
   </Rule>
  </Rules>
 </FxCopReport>
</FxCopProject>
